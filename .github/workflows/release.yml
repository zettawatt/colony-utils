name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  TAG_NAME: ${{ github.event.inputs.tag_name || github.ref_name }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, clippy, fmt]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  build:
    name: Build Binaries
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_cross: false
            setup_target: true
          - os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use_cross: false
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            use_cross: false
            setup_target: true
    runs-on: ${{ matrix.os }}
    needs: [test, clippy, fmt]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2

      # Setup musl tools for native Linux builds
      - name: Setup musl tools
        if: contains(matrix.target, 'musl') && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          # Install a musl-compatible C++ toolchain
          wget -q https://musl.cc/x86_64-linux-musl-cross.tgz
          tar -xzf x86_64-linux-musl-cross.tgz
          sudo mv x86_64-linux-musl-cross /opt/
          echo "/opt/x86_64-linux-musl-cross/bin" >> $GITHUB_PATH

      # Setup ARM64 target for native compilation
      - name: Setup ARM64 target
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-musl

      # Setup Windows GNU toolchain
      - name: Setup Windows GNU toolchain
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          # Install MSYS2 and MinGW-w64
          choco install msys2 -y
          # Add MinGW-w64 to PATH and install target
          echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
          rustup target add x86_64-pc-windows-gnu
        shell: pwsh

      # Build binaries
      - name: Build binaries
        run: |
          cargo build --release --target ${{ matrix.target }} --bin colonyd
          cargo build --release --target ${{ matrix.target }} --bin colony
        shell: bash
        env:
          # Set RUSTFLAGS for static linking on musl and Windows GNU targets
          RUSTFLAGS: ${{ matrix.target == 'aarch64-unknown-linux-musl' && '-C target-feature=+crt-static' || matrix.target == 'x86_64-unknown-linux-musl' && '-C target-feature=+crt-static' || matrix.target == 'x86_64-pc-windows-gnu' && '-C target-feature=+crt-static' || '' }}
          # Set linker for ARM64 musl when building natively
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-gcc' || '' }}
          # Additional environment variables
          CARGO_BUILD_TARGET_DIR: ${{ github.workspace }}/target

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/colonyd*
            target/${{ matrix.target }}/release/colony*

  artifacts-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event.inputs.create_release == 'false' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List built artifacts
        run: |
          echo "## Built Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "The following binaries were successfully built:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          find artifacts -type f -name "colony*" | while read file; do
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
            echo "- \`$(basename "$file")\` (${size} bytes)" >> $GITHUB_STEP_SUMMARY
          done

  release:
    name: Create Release and Upload Binaries
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event.inputs.create_release != 'false' }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Prepare release assets
      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Linux x86_64
          cp artifacts/binaries-x86_64-unknown-linux-musl/colonyd release-assets/colonyd-x86_64-unknown-linux-musl
          cp artifacts/binaries-x86_64-unknown-linux-musl/colony release-assets/colony-x86_64-unknown-linux-musl

          # Linux ARM64 (Raspberry Pi, etc.)
          cp artifacts/binaries-aarch64-unknown-linux-musl/colonyd release-assets/colonyd-aarch64-unknown-linux-musl
          cp artifacts/binaries-aarch64-unknown-linux-musl/colony release-assets/colony-aarch64-unknown-linux-musl

          # macOS x86_64 (Intel)
          cp artifacts/binaries-x86_64-apple-darwin/colonyd release-assets/colonyd-x86_64-apple-darwin
          cp artifacts/binaries-x86_64-apple-darwin/colony release-assets/colony-x86_64-apple-darwin

          # macOS ARM64 (Apple Silicon)
          cp artifacts/binaries-aarch64-apple-darwin/colonyd release-assets/colonyd-aarch64-apple-darwin
          cp artifacts/binaries-aarch64-apple-darwin/colony release-assets/colony-aarch64-apple-darwin

          # Windows x86_64
          cp artifacts/binaries-x86_64-pc-windows-gnu/colonyd.exe release-assets/colonyd-x86_64-pc-windows-gnu.exe
          cp artifacts/binaries-x86_64-pc-windows-gnu/colony.exe release-assets/colony-x86_64-pc-windows-gnu.exe

      # Create release and upload assets
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

