name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, clippy, fmt]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  release:
    name: Create Release and Upload Binaries
    runs-on: ubuntu-latest
    needs: [test, clippy, fmt]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      # Install cross-compilation tools
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Build for all targets
      - name: Build Linux binary
        run: |
          cross build --release --target x86_64-unknown-linux-musl --bin colonyd
          cross build --release --target x86_64-unknown-linux-musl --bin colony

      - name: Build macOS binary
        run: |
          cross build --release --target x86_64-apple-darwin --bin colonyd
          cross build --release --target x86_64-apple-darwin --bin colony

      - name: Build Windows binary
        run: |
          cross build --release --target x86_64-pc-windows-gnu --bin colonyd
          cross build --release --target x86_64-pc-windows-gnu --bin colony

      # Prepare release assets
      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Linux
          cp target/x86_64-unknown-linux-musl/release/colonyd release-assets/colonyd-x86_64-unknown-linux-musl
          cp target/x86_64-unknown-linux-musl/release/colony release-assets/colony-x86_64-unknown-linux-musl

          # macOS
          cp target/x86_64-apple-darwin/release/colonyd release-assets/colonyd-x86_64-apple-darwin
          cp target/x86_64-apple-darwin/release/colony release-assets/colony-x86_64-apple-darwin

          # Windows
          cp target/x86_64-pc-windows-gnu/release/colonyd.exe release-assets/colonyd-x86_64-pc-windows-gnu.exe
          cp target/x86_64-pc-windows-gnu/release/colony.exe release-assets/colony-x86_64-pc-windows-gnu.exe

      # Create release and upload assets
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

